// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name SignManager
import CommonCrypto
import Compression
import CryptoKit
import Foundation
import LocalAuthentication
import Security
@_exported import SignManager
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_inheritsConvenienceInitializers @objc public class SignManagement : ObjectiveC.NSObject {
  @objc public static let shared: SignManager.SignManagement
  @objc override dynamic public init()
  @objc deinit
}
@available(iOS 13.0, *)
extension SignManager.SignManagement {
  @objc dynamic public func createJWSRequestBody(parameter: [Swift.String : Any], publicKey: Swift.String, privateKey: Swift.String) -> Foundation.Data?
  @objc dynamic public func createJSONFromJWS(jws: Swift.String, privateKey: Swift.String, publicKey: Swift.String) -> Swift.String
  public func verifyJWSandConvertToJWE(seriString: Swift.String, publicKeyString: Swift.String) -> Swift.String
  public func convertJWEToJSONOBject(jwe: Swift.String, privateKeyString: Swift.String) -> Swift.String
  public func createJWE(data: Foundation.Data, publicKey: Swift.String) -> Swift.String?
  public func createJWS(data: Foundation.Data, key: Swift.String) -> Swift.String?
  public func createPublicKey(pem: Swift.String) -> Security.SecKey?
  public func createPrivateKey(pem: Swift.String) -> Security.SecKey?
  public func createSecKeyFromPrivateKey(privateKeyPEM: Swift.String) -> Security.SecKey?
  public func extractBase64EncodedData(fromPEM pemString: Swift.String) -> Swift.String?
}
@available(iOS 13.0, *)
extension SignManager.SignManagement {
  public func decryptJWE(_ jwe: Swift.String, privateKeyString: Swift.String, keyManagementAlgorithm: SignManager.KeyManagementAlgorithm = .RSAOAEP256, contentEncryptionAlgorithm: SignManager.ContentEncryptionAlgorithm = .A128GCM) -> Swift.String
  public func encryptJWE(data: Foundation.Data, publicKey: Swift.String, keyManagementAlgorithm: SignManager.KeyManagementAlgorithm = .RSAOAEP256, contentEncryptionAlgorithm: SignManager.ContentEncryptionAlgorithm = .A128GCM) -> Swift.String?
}
@objc public enum SignMananagerError : Swift.Int, Swift.Error {
  case badParameter
  case joserError
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public enum KeyManagementAlgorithm : Swift.String, Swift.CaseIterable {
  case RSA1_5
  case RSAOAEP
  case RSAOAEP256
  case A128KW
  case A192KW
  case A256KW
  case direct
  public init?(rawValue: Swift.String)
  public typealias AllCases = [SignManager.KeyManagementAlgorithm]
  public typealias RawValue = Swift.String
  public static var allCases: [SignManager.KeyManagementAlgorithm] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum ContentEncryptionAlgorithm : Swift.String {
  case A256CBCHS512
  case A128CBCHS256
  case A256GCM
  case A128GCM
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension SignManager.KeyManagementAlgorithm : Swift.Equatable {}
extension SignManager.KeyManagementAlgorithm : Swift.Hashable {}
extension SignManager.KeyManagementAlgorithm : Swift.RawRepresentable {}
extension SignManager.ContentEncryptionAlgorithm : Swift.Equatable {}
extension SignManager.ContentEncryptionAlgorithm : Swift.Hashable {}
extension SignManager.ContentEncryptionAlgorithm : Swift.RawRepresentable {}
extension SignManager.SignMananagerError : Swift.Equatable {}
extension SignManager.SignMananagerError : Swift.Hashable {}
extension SignManager.SignMananagerError : Swift.RawRepresentable {}
