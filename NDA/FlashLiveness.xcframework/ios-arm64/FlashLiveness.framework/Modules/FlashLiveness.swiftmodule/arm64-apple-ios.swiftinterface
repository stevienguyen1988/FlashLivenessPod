// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name FlashLiveness
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVFoundation
import DeveloperToolsSupport
import Foundation
import KeychainSwift
import Lottie
import ObjectMapper
import SignManager
import Swift
import SwiftUI
import UIKit
import Vision
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_inheritsConvenienceInitializers @available(iOS 13.0, *)
@objc public class Networking : ObjectiveC.NSObject {
  @objc public static let shared: Networking
  @objc public func setup(appId: Swift.String, logLevel: LogLevel = .debug, url: Swift.String, publicKey: Swift.String, privateKey: Swift.String)
  @objc public func generateDeviceInfor(deviceId: Swift.String = "", additionParam: [Swift.String : Any] = [:], paramHeader: [Swift.String : Swift.String] = [:], ownerId: Swift.String = "") -> LivenessResponse
  @objc public func resetDeviceInfo()
  @objc override dynamic public init()
  @objc deinit
}
@available(iOS 13.0, *)
extension Networking {
  public func uploadImage(normalImage: [UIKit.UIImage], color: Swift.Int, sessionId: Swift.String = "") async throws -> [Swift.String : Any]
  @objc dynamic public func initTransaction(duration: Swift.Int = 30, additionParam: [Swift.String : Any] = [:], paramHeader: [Swift.String : Swift.String] = [:], clientTransactionId: Swift.String = "") async throws -> LivenessResponse
  @objc dynamic public func registerFace(faceImage: UIKit.UIImage, additionParam: [Swift.String : Any] = [:], paramHeader: [Swift.String : Swift.String] = [:]) async throws -> LivenessResponse
}
public struct MultipartRequest {
  public let boundary: Swift.String
  public init(boundary: Swift.String = UUID().uuidString)
  public mutating func add(key: Swift.String, value: Swift.String)
  public mutating func add(key: Swift.String, fileName: Swift.String, fileMimeType: Swift.String, fileData: Foundation.Data)
  public var httpContentTypeHeadeValue: Swift.String {
    get
  }
  public var httpBody: Foundation.Data {
    get
  }
}
@objc public enum LivenessError : Swift.Int, Swift.Error {
  case noFaceDetected
  case smallFace
  case bigFace
  case facePose
  case badImage
  case noVerificationInstruction
  case badResponse
  case twoFace
  case hangError
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum LogLevel : Swift.Int, Swift.CaseIterable {
  case verbose = 0
  case debug = 1
  case info = 2
  case warning = 3
  case error = 4
  case none = 5
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [LogLevel]
  public typealias RawValue = Swift.Int
  nonisolated public static var allCases: [LogLevel] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class Log {
  public static var logLevel: LogLevel
  public static var storeLogs: Swift.Bool
  public static var logData: [Swift.String]
  public class func verbose(_ msg: @autoclosure () -> Swift.String)
  public class func debug(_ msg: @autoclosure () -> Swift.String)
  public class func info(_ msg: @autoclosure () -> Swift.String)
  public class func warning(_ msg: @autoclosure () -> Swift.String)
  public class func error(_ msg: @autoclosure () -> Swift.String)
  public class func clearStoredLogs()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class LivenessMaskView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var instructionText: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var previewFrame: CoreFoundation.CGRect {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var processingOvalBorderColor: UIKit.UIColor
  @_Concurrency.MainActor @preconcurrency public var errorOvalBorderColor: UIKit.UIColor
  @_Concurrency.MainActor @preconcurrency public var normalOvalBorderColor: UIKit.UIColor
  @_Concurrency.MainActor @preconcurrency public var processingAnimDuration: Swift.Double
  @_Concurrency.MainActor @preconcurrency public var instructionTextAttributes: [Foundation.NSAttributedString.Key : Any]
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func draw(_ rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension LivenessMaskView {
  @_Concurrency.MainActor @preconcurrency public func showError(_ message: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func showDetected(_ message: Swift.String?)
  @_Concurrency.MainActor @preconcurrency public func showProcessing(_ message: Swift.String?)
  @_Concurrency.MainActor @preconcurrency public func showMessage(_ message: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func showSuccess(_ message: Swift.String)
}
public enum FlashLivenessThreshold {
  case high, medium, low
  public static func == (a: FlashLivenessThreshold, b: FlashLivenessThreshold) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum FlashLivenessMode {
  case online
  case offline
  public static func == (a: FlashLivenessMode, b: FlashLivenessMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class LivenessFaceImage : ObjectiveC.NSObject {
  @objc final public let color: UIKit.UIColor
  @objc final public let image: UIKit.UIImage
  @objc final public let imagePath: Foundation.URL?
  @objc final public let imageBase64: Swift.String?
  @objc final public let colorString: Swift.String?
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class LivenessFaceImages : ObjectiveC.NSObject {
  @objc public var images: [LivenessFaceImage]?
  @objc final public let originalImage: LivenessFaceImage
  @objc deinit
}
@available(iOS 13.0, *)
@objc public protocol LivenessUtilityDetectorDelegate {
  @objc optional func liveness(_ liveness: LivenessUtilityDetector, didFail withError: LivenessError)
  @objc optional func liveness(_ liveness: LivenessUtilityDetector, didFinishUploadWithResult result: [Swift.String : Any])
  @objc optional func liveness(_ liveness: LivenessUtilityDetector, didFinishWithResult result: LivenessResult)
  @objc optional func liveness(_ liveness: LivenessUtilityDetector, didFinishWithFaceImages images: LivenessFaceImages)
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, *)
@objc public class LivenessUtilityDetector : ObjectiveC.NSObject {
  weak public var delegate: (any LivenessUtilityDetectorDelegate)?
  @objc public func getVerificationRequiresAndStartSession(transactionId: Swift.String = "") throws
  @objc public func stopLiveness()
  @objc deinit
}
@available(iOS 13.0, *)
extension LivenessUtilityDetector : AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate {
  @objc dynamic public func captureOutput(_ output: AVFoundation.AVCaptureOutput, didOutput sampleBuffer: CoreMedia.CMSampleBuffer, from connection: AVFoundation.AVCaptureConnection)
}
@objc @objcMembers public class LivenessResponse : ObjectiveC.NSObject, ObjectMapper.Mappable {
  @objc public var status: Swift.Int
  @objc public var data: Swift.String
  @objc public var signature: Swift.String
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc @objcMembers public class LivenessResult : ObjectiveC.NSObject, ObjectMapper.Mappable {
  @objc public var status: Swift.Int
  @objc public var data: [Swift.String : Any]
  @objc public var signature: Swift.String
  @objc public var livenesScore: Swift.Double
  @objc public var faceMatchingScore: Swift.Double
  @objc public var success: Swift.Bool
  @objc public var sim: Swift.Double
  @objc public var livenessType: Swift.String
  @objc public var mess: Swift.String
  @objc public var code: Swift.String
  @objc public var request_id: Swift.String
  @objc public var faceMatchingResult: Swift.Double
  required public init?(map: ObjectMapper.Map)
  public func mapping(map: ObjectMapper.Map)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @available(iOS 13.0, *)
public class FlashLivenessUtils : ObjectiveC.NSObject {
  public class func createLivenessDetector(previewView: UIKit.UIView, mode: FlashLivenessMode = .online, threshold: FlashLivenessThreshold = .high, debugging: Swift.Bool = false, delegate: (any LivenessUtilityDetectorDelegate)?, instructionTextAttributes: [Foundation.NSAttributedString.Key : Any] = [.font: UIFont.systemFont(ofSize: 18, weight: .semibold), .foregroundColor: UIColor.black], brightnessEnable: Swift.Bool = true, additionParam: [Swift.String : Any] = [:], additionHeader: [Swift.String : Swift.String] = [:]) -> LivenessUtilityDetector
  @objc override dynamic public init()
  @objc deinit
}
extension LivenessError : Swift.Equatable {}
extension LivenessError : Swift.Hashable {}
extension LivenessError : Swift.RawRepresentable {}
extension LogLevel : Swift.Equatable {}
extension LogLevel : Swift.Hashable {}
extension LogLevel : Swift.RawRepresentable {}
extension FlashLivenessThreshold : Swift.Equatable {}
extension FlashLivenessThreshold : Swift.Hashable {}
extension FlashLivenessMode : Swift.Equatable {}
extension FlashLivenessMode : Swift.Hashable {}
